oj <- read.csv("~/Desktop/Data Science/FEM11213/Data/oj.csv")
basefit <- lm(log(sales) ~ log(price), data=oj)
coef(basefit)
brandfit <- lm(log(sales) ~ brand + log(price), data=oj)
coef(brandfit)

cell <- read.csv("~/Desktop/Data Science/FEM11213/Data/us_cellphone.csv")
abortion <- read.csv("~/Desktop/Data Science/FEM11213/Data/abortion.dat")
cellrate <- 5*cell[,2]/(1000*cell[,3]) 
par(mai=c(.9,.9,.1,.1))
plot(1985:1997, tapply(d, t, mean), bty="n", xlab="year", ylab="rate", pch=21, bg=2)
points(1985:1997, cellrate, bg=4, pch=21)
legend("topleft", fill=c(2,4), legend=c("abortions","cellphones"), bty="n")


library(gamlr)
## refactor state to have NA reference level
sna <- factor(s, levels=c(NA,levels(s)), exclude=NULL)
x <- sparse.model.matrix( ~ t + phone*sna + .^2, data=controls)[,-1]
dim(x)
## naive lasso regression
naive <- cv.gamlr(cbind(d,x),y); head(coef(naive))
coef(naive)["d",] 
treat <- cv.gamlr(x,d, lmr=1e-3); head(summary(treat))
predtreat <- predict(treat, x, select="min"); head(predtreat)
dhat <- drop(predtreat); length(dhat)
par(mai=c(.9,.9,.1,.1))
plot(dhat,d,bty="n",pch=21,bg=8, cex=.8, yaxt="n")
axis(2, at=c(0,1,2,3))
## IS R^2?
cor(drop(dhat),d)^2
## Note: IS R2 indicates how much independent signal you have for estimating
coef(summary( glm( y ~ d + dhat) ))
# re-run lasso, with this (2nd column) included unpenalized (free=2)
causal <- cv.gamlr(cbind(d,dhat,x),y,free=2,lmr=1e-3)
coef(causal, select="min")["d",]

library(gamlr)
data(hockey)
head(goal, n=2)
player[1:2, 2:7] 
team[1, 2:6] 
x <- cbind(config,team,player)
y <- goal$homegoal
fold <- sample.int(2,nrow(x),replace=TRUE)
head(fold)
nhlprereg <- gamlr(x[fold==1,], y[fold==1],
free=1:(ncol(config)+ncol(team)),
family="binomial", standardize=FALSE)
selected <- which(coef(nhlprereg)[-1,] != 0)
xnotzero <- as.data.frame(as.matrix(x[,selected]))
nhlmle <- glm( y ~ ., data=xnotzero,
               subset=which(fold==2), family=binomial )
summary(nhlmle)
x[1,x[1,]!=0] 
fit <- predict(nhlmle, xnotzero[1,,drop=FALSE], type="response", se.fit=TRUE)$fit; fit
se.fit <- predict(nhlmle, xnotzero[1,,drop=FALSE], type="response", se.fit=TRUE)$se.fit; se.fit
CI = fit + c(-2,2)*se.fit

library(AER)
library(gamlr)
dreg <- function(x,d){ cv.gamlr(x, d, lmr=1e-5) }
yreg <- function(x,y){ cv.gamlr(x, y, lmr=1e-5) }
orthoLTE <- function(x, d, y, dreg, yreg, nfold=2)
{
 # randomly split data into folds
 nobs <- nrow(x)
 foldid <- rep.int(1:nfold,
 times = ceiling(nobs/nfold))[sample.int(nobs)]
 I <- split(1:nobs, foldid)
 # create residualized objects to fill
 ytil <- dtil <- rep(NA, nobs)
 # run OOS orthogonalizations
 cat("fold: ")
 for(b in 1:length(I)){
 dfit <- dreg(x[-I[[b]],], d[-I[[b]]])
 yfit <- yreg(x[-I[[b]],], y[-I[[b]]])
 dhat <- predict(dfit, x[I[[b]],], type="response")
 yhat <- predict(yfit, x[I[[b]],], type="response")
 dtil[I[[b]]] <- drop(d[I[[b]]] - dhat)
 ytil[I[[b]]] <- drop(y[I[[b]]] - yhat)
 cat(b," ")
 }
 rfit <- lm(ytil ~ dtil)
 gam <- coef(rfit)[2]
 se <- sqrt(vcovHC(rfit)[2,2])
 cat(sprintf("\ngamma (se) = %g (%g)\n", gam, se))
 return( list(gam=gam, se=se, dtil=dtil, ytil=ytil) )
}
# OrthoML and effect of abortion access on crime
resids <- orthoLTE( x=x, d=d, y=y,dreg=dreg, yreg=yreg, nfold=5)
head(resids$dtil)
head(resids$ytil)
2*pnorm(-abs(resids$gam)/resids$se) 