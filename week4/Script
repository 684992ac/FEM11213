SC <- read.csv("~/Desktop/Data Science/FEM11213/Data/semiconductor.csv")
full <- glm(FAIL ~ ., data=SC, family=binomial)
1 - full$deviance/full$null.deviance
## Out of sample prediction experiment
## first, define the deviance and R2 functions
## pred must be probabilities (0<pred<1) for binomial
deviance <- function(y, pred, family=c("gaussian","binomial")){
  family <- match.arg(family)
  if(family=="gaussian"){
    return( sum( (y-pred)^2 ) )
  }else{
    if(is.factor(y)) y <- as.numeric(y)>1
    return( -2*sum( y*log(pred) + (1-y)*log(1-pred) ) )
  }
}
## get null devaince too, and return R2
R2 <- function(y, pred, family=c("gaussian","binomial")){
  fam <- match.arg(family)
  if(fam=="binomial"){
    if(is.factor(y)){ y <- as.numeric(y)>1 }
  }
  dev <- deviance(y, pred, family=fam)
  dev0 <- deviance(y, mean(y), family=fam)
  return(1-dev/dev0)
}
# setup the experiment
n <- nrow(SC) # the number of observations
K <- 10 # the number of `folds'
# create a vector of fold memberships (random order)
foldid <- rep(1:K,each=ceiling(n/K))[sample(1:n)]
# create an empty dataframe of results
Out <- data.frame(full=rep(NA,K))
# use a for loop to run the experiment
for(k in 1:K){
  train <- which(foldid!=k) # train on all but fold `k'
  ## fit regression on full sample
  rfull <- glm(FAIL~., data=SC, subset=train, family=binomial)
  ## get prediction: type=response so we have probabilities
  predfull <- predict(rfull, newdata=SC[-train,], type="response")
  ## calculate and log R2
  Out$full[k] <- R2(y=SC$FAIL[-train], pred=predfull, family="binomial")
  ## print progress
  cat(k, " ")
}
boxplot(Out, col="plum", ylab="R2")
## what are the average Out R2?
colMeans(Out)
boxplot(Out, col="plum", ylab="R2") ## what are the average Out R2?
colMeans(Out)
null <- glm(FAIL~1, data=SC)
fwd <- step(null, scope=formula(full), dir="forward")
length(coef(fwd))
## run a lasso path plot
spender <- gamlr(xweb, log(yspend), verb=TRUE); spender
betamin = coef(cv.spender, select='min'); bet
plot(spender)
# Set seed for reproducibility
set.seed(123)

# Generate synthetic data for predictors (xweb)
n <- 100  # Number of observations
p <- 10   # Number of predictors
xweb <- matrix(rnorm(n * p), nrow = n, ncol = p)  # Random normal data

# Create coefficients for a linear relationship
beta <- runif(p, -2, 2)  # Random coefficients between -2 and 2

# Generate yspend (response variable) with some noise
yspend <- exp(xweb %*% beta + rnorm(n, sd = 0.5))  # Ensure positive response for log()

# Inspect yspend
head(yspend)
dim(xweb)  # Should be 100 x 10
length(yspend)  # Should be 100
library(gamlr)

spender <- gamlr(xweb, log(yspend), verb=TRUE)
plot(spender)

# Basic plot with specified axis limits
plot(x, y, type="b", xlim=c(-12, 0), ylim=c(0, 2,8),
     xlab="X-Axis Label", ylab="Y-Axis Label", main="Custom Axis Limits")
betamin = coef(cv.spender, select="min"); betamin
head(AIC(spender))



